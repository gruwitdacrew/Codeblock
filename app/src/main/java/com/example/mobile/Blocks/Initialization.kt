package com.example.mobile.Blocks

import com.example.aplication.Logic.MainBlock
import com.example.aplication.Logic.MainBlock.Companion.variables

//Задача: реализовать свой собственный аналог codeblock(интерпретатор алгоритмов, строятся из структурных элементов языка) в форме мобильного приложения.
//
//Ваш интерпретатор должен позволять:
//Объявлять целочисленные переменные. В ваши допустимые элементы языка должен быть заложен блок (в прямом смысле, перетаскиваемый по экрану элемент), который позволяет декларировать новую целочисленную переменную и указать ее имя. Небольшое усложнение: возможность добавить новые переменные через запятые, а не делать несколько команд для нескольких переменных. Для простоты считаем, что все вновь объявленные переменные по умолчанию равны 0.
//Реализовать базовую логику оператора присваивания. В ваши допустимые элементы языка должен быть заложен блок, которые олицетворяет собой операцию присваивания. В которой вы указываете переменную, к которой применяется операция присваивания, а затем указываете арифметическую операцию.
//Обрабатывать базовые арифметические операции. Ваш интерпретатор должен позволять создавать арифметические выражения, в которые могут входить целочисленные константы, переменные, стандартные операции для работы с целочисленными значениями (сложение, вычитание, умножение, деление целой части, остаток от деления). ДОПУСТИМОЕ, но не поощряемое упрощение: игнорировать арифметический порядок выполнения операций (только если вы не претендуете ни на одну другую категорию).
//
//Ваш интерпретатор должен позволять:
//Расширять и обрабатывать скобочные последовательности в арифметических операциях, изменяя порядок выполнения операций.
//Поддерживать операции ввода/вывода переменных через взаимодействие с пользователем. В этом случае вы позволяете пользователю вводить значения переменных, и получать их в качестве вывода. Логично позволить в этих командах вводить и выводить множество переменных через запятую.
//Оператор If. Допустимый вариант: вы создаете элемент языка, который выполняет функцию логического оператора if, в основу которого можно указать какую-то из операций сравнения (>,<,=,!=,>=,<=) и два арифметических выражения, что с чем сравнивается. Далее создается подблок, куда можно указать набор алгоритмических команд, которые будут выполняться, если логическое условие верно
//Язык: kotlin (jetpack compose framework)


class Initialization : MainBlock {
    override var ErrorString = ""
    override var status = true
    val vars = variables
    val name: String? = null
    val previousBlock: MainBlock? = null
    val nextBlock: MainBlock? = null
    var textBar: String = ""
    override fun start() = indetify()
    fun indetify() {
        if (!textBar?.contains(Regex("""([^\w|,|\s]|((^|,)\s*([0-9]+[a-zA-Z]+|\d+))|(\w+\s+\w+)|,{2,})"""))!!) {
            val matches = Regex("""[a-zA-Z]+[0-9]*""").findAll(textBar)
            for (name in matches) {
                vars += name.value to 0
            }

        } else {
            val text = textBar
            val matches =
                Regex("""([^\w|,|\s]|((^|,)\s*([0-9]+[a-zA-Z]+|\d+))|(\w+\s+\w+)|,{2,})""").find(
                    text
                )
            ErrorString = "the value of the variable was entered incorrectly ${matches?.value}"
            status = false
        }
        println(vars)
    }

}